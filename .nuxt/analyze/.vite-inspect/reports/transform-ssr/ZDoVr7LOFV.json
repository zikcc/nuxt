{
  "resolvedId": "D:/CODE/Blog/nuxt-main/components/home/timeline.vue",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "<script lang=\"ts\" setup name=\"TimelineSection\">\n  import {\n    Linear,\n    gsap\n  } from 'gsap'\n  import {\n    ScrollTrigger\n  } from 'gsap/dist/ScrollTrigger'\n  import {\n    Branch,\n    type BranchNode,\n    type CheckpointNode,\n    type IDesktop,\n    ItemSize,\n    MENULINKS,\n    NodeTypes,\n    TIMELINE,\n    type TimelineNodeV2,\n    isSmallScreen,\n  } from '~/store/constants'\n\n  const props = defineProps < IDesktop > ()\n  const svgColor = '#9CA3AF'\n  const animColor = '#FCD34D'\n  const separation = 450\n  const strokeWidth = 2\n  const leftBranchX = 13\n  const curveLength = 150\n  const dotSize = 26\n  const timelineSvg: Ref < SVGSVGElement | undefined > = ref(undefined)\n  const svgContainer: Ref < HTMLDivElement | undefined > = ref(undefined)\n  const screenContainer: Ref < HTMLDivElement | undefined > = ref(undefined)\n\n  const svgWidth = ref(400)\n  let rightBranchX = 109\n\n  function addNodeRefsToItems(timeline: Array < TimelineNodeV2 > ): Array < LinkedTimelineNode > {\n    return timeline.map((node, idx) => ({\n      ...node,\n      next: timeline[idx + 1],\n      prev: timeline[idx - 1],\n    }))\n  }\n\n  function generateTimelineSvg(timeline: Array < TimelineNodeV2 > ): string {\n    let index = 1\n    let y = dotSize / 2\n    const timelineStyle = `<style>.str, .dot{stroke-width: ${strokeWidth}px}.anim-branch{stroke-dasharray: 186}</style>`\n    let isDiverged = false\n\n    const timelineSvg = addNodeRefsToItems(timeline).reduce((svg: string, node: LinkedTimelineNode) => {\n      const {\n        type,\n        next\n      } = node\n      let lineY = y\n      let dotY = y + separation / 2\n\n      switch (type) {\n        case NodeTypes.CHECKPOINT: {\n          const {\n            shouldDrawLine\n          } = node\n\n          // special handling for last checkpoint\n          if (!next)\n            lineY = y - separation / 2\n\n          // special handling for dot without line\n          if (!shouldDrawLine)\n            dotY = y\n\n          if (shouldDrawLine) {\n            // TO DO fix syntax\n            svg = shouldDrawLine ? `${drawLine(node, lineY, index, isDiverged)}${svg}` : svg\n            y = y + separation\n            index++\n          }\n\n          svg = svg.concat(drawDot(node, dotY, isDiverged))\n        }\n        break\n      case NodeTypes.DIVERGE:\n        isDiverged = true\n        svg = `${drawBranch(node, y, index)}${svg}`\n        break\n      case NodeTypes.CONVERGE:\n        isDiverged = false\n        // Drawing CONVERGE branch with previous line and index\n        svg = `${drawBranch(node, y - separation, index - 1)}${svg}`\n        break\n      }\n\n      return svg\n    }, timelineStyle)\n\n    return timelineSvg\n  }\n\n  function getDotString(x: number, y: number) {\n    return `<rect class='dot' width=${dotSize} height=${dotSize} fill='#111827' x=${x - dotSize / 2} y=${\n    y - dotSize / 2\n  } ></rect><circle cx=${x} cy=${y} r='7' stroke=${svgColor} class='dot' ></circle>`\n  }\n\n  function drawDot(timelineNode: LinkedCheckpointNode, y: number, isDiverged: boolean) {\n    const {\n      next,\n      alignment\n    } = timelineNode as LinkedCheckpointNode\n\n    // Diverging\n    if (next && next.type === NodeTypes.DIVERGE)\n      y = y - curveLength + 6 * dotSize\n\n    // Converging\n    if (next && next.type === NodeTypes.CONVERGE)\n      y = y + curveLength - 6 * dotSize\n\n    const dotString = getDotString(alignment === Branch.LEFT ? leftBranchX : rightBranchX, y)\n    const textString = addText(timelineNode, y, isDiverged)\n    return `${textString}${dotString}`\n  }\n\n  function addText(timelineNode: LinkedCheckpointNode, y: number, isDiverged: boolean) {\n    const {\n      title,\n      subtitle,\n      size,\n      image\n    } = timelineNode\n\n    const offset = isDiverged ? rightBranchX : 10\n    const foreignObjectX = dotSize / 2 + 10 + offset\n    const foreignObjectY = y - dotSize / 2\n    const foreignObjectWidth = svgWidth.value - (dotSize / 2 + 10 + offset)\n\n    const titleSizeClass = size === ItemSize.LARGE ? 'text-6xl' : 'text-2xl'\n    const logoString = image ?\n      `<img src='${image}' class='h-8 mb-2' loading='lazy' width='100' height='32' alt='${image}' />` : ''\n    const subtitleString = subtitle ?\n      `<p class='text-xl mt-2 text-gray-200 font-medium tracking-wide'>${subtitle}</p>` : ''\n\n    return `<foreignObject x=${foreignObjectX} y=${foreignObjectY} width=${foreignObjectWidth} \n        height=${separation}>${logoString}<p class='${titleSizeClass}'>${title}</p>${subtitleString}</foreignObject>`\n  }\n\n  function drawLine(timelineNode: LinkedCheckpointNode, y: number, i: number, isDiverged: boolean) {\n    const {\n      alignment,\n      prev,\n      next\n    } = timelineNode as LinkedCheckpointNode\n\n    const isPrevDiverge = prev && prev.type === NodeTypes.DIVERGE\n    const isNextConverge = next && next.type === NodeTypes.CONVERGE\n\n    const lineY = Math.abs(y + separation)\n\n    // Smaller line for Diverging\n    if (isPrevDiverge)\n      return `<line class='str' x1=${leftBranchX} y1=${y} x2=${leftBranchX} y2=${lineY} stroke=${svgColor} /><line class='str line-${i}' x1=${leftBranchX} y1=${y} x2=${leftBranchX} y2=${lineY} stroke=${animColor} />`\n\n    // Smaller line for Converging\n    if (isNextConverge)\n      return `<line class='str' x1=${leftBranchX} y1=${y} x2=${leftBranchX} y2=${lineY} stroke=${svgColor} /><line class='str line-${i}' x1=${leftBranchX} y1=${y} x2=${leftBranchX} y2=${lineY} stroke=${animColor} />`\n\n    const lineX = alignment === Branch.LEFT ? leftBranchX : rightBranchX\n\n    let str =\n      `<line class='str' x1=${lineX} y1=${y} x2=${lineX} y2=${lineY} stroke=${svgColor} /><line class='str line-${i}' x1=${lineX} y1=${y} x2=${lineX} y2=${lineY} stroke=${animColor} />`\n\n    // If already diverged, draw parallel line to the existing line\n    if (isDiverged) {\n      const divergedLineX = alignment === Branch.LEFT ? rightBranchX : leftBranchX\n      str = str.concat(\n        `<line class='str' x1=${divergedLineX} y1=${y} x2=${divergedLineX} y2=${lineY} stroke=${svgColor} /><line class='str line-${i}' x1=${divergedLineX} y1=${y} x2=${divergedLineX} y2=${lineY} stroke=${animColor} />`,\n      )\n    }\n    return str\n  }\n\n  function drawBranch(timelineNode: LinkedBranchNode, y: number, i: number) {\n    const {\n      type\n    } = timelineNode\n    switch (type) {\n      case NodeTypes.DIVERGE:\n        return `<path class='str' d='M ${leftBranchX} ${y} C ${leftBranchX} ${y + curveLength / 2} ${rightBranchX} ${\n        y + curveLength / 2\n      } ${rightBranchX} ${y + curveLength}' stroke=${svgColor} /><line class='str' x1=${rightBranchX} y1=${\n        y + curveLength\n      } x2=${rightBranchX} y2=${\n        y + separation\n      } stroke=${svgColor} /><path class='str anim-branch branch-${i}' d='M ${leftBranchX} ${y} C ${leftBranchX} ${\n        y + curveLength / 2\n      } ${rightBranchX} ${y + curveLength / 2} ${rightBranchX} ${\n        y + curveLength\n      }' stroke=${animColor} /><line class='str branch-line-${i}' x1=${rightBranchX} y1=${y + curveLength} x2=${rightBranchX} y2=${\n        y + separation\n      } stroke=${animColor} />`\n      case NodeTypes.CONVERGE:\n        return `<path class='str' d='M ${rightBranchX} ${y + separation - curveLength} C ${rightBranchX} ${\n        y + separation - curveLength + curveLength / 2\n      } ${leftBranchX} ${y + separation - curveLength + curveLength / 2} ${leftBranchX} ${\n        y + separation\n      }' stroke=${svgColor} /><line class='str' x1=${rightBranchX} y1=${y} x2=${rightBranchX} y2=${Math.abs(\n        y + separation - curveLength,\n      )} stroke=${svgColor} /><path class='str anim-branch branch-${i}' d='M ${rightBranchX} ${\n        y + separation - curveLength\n      } C ${rightBranchX} ${y + separation - curveLength + curveLength / 2} ${leftBranchX} ${\n        y + separation - curveLength + curveLength / 2\n      } ${leftBranchX} ${\n        y + separation\n      }' stroke=${animColor} /><line class='str branch-line-${i}' x1=${rightBranchX} y1=${y} x2=${rightBranchX} y2=${Math.abs(\n        y + separation - curveLength,\n      )} stroke=${animColor} />`\n      default:\n        return ''\n    }\n  }\n\n  function addLineSvgAnimation(timeline: GSAPTimeline, duration: number, index: number): GSAPTimeline {\n    const startTime = `start+=${duration * index}`\n\n    timeline.from(svgContainer.value!.querySelectorAll(`.line-${index + 1}`), {\n      scaleY: 0,\n      duration\n    }, startTime)\n\n    return timeline\n  }\n\n  function addDivergingBranchLineAnimation(timeline: GSAPTimeline, duration: number, index: number): GSAPTimeline {\n    timeline\n      .from(svgContainer.value!.querySelector(`.line-${index + 1}`), {\n        scaleY: 0,\n        duration\n      }, `start+=${duration * index}`)\n      .from(\n        svgContainer.value!.querySelector(`.branch-${index + 1}`), {\n          strokeDashoffset: 186,\n          duration: duration - 2\n        },\n        `start+=${duration * index}`,\n      )\n      .from(\n        svgContainer.value!.querySelector(`.branch-line-${index + 1}`), {\n          scaleY: 0,\n          duration: duration - 1\n        },\n        `start+=${duration * (index + 1) - 2}`,\n      )\n\n    return timeline\n  }\n\n  function addConvergingBranchLineAnimation(timeline: GSAPTimeline, duration: number, index: number): GSAPTimeline {\n    timeline\n      .from(svgContainer.value!.querySelector(`.line-${index + 1}`), {\n        scaleY: 0,\n        duration\n      }, `start+=${duration * index}`)\n      .from(\n        svgContainer.value!.querySelector(`.branch-line-${index + 1}`), {\n          scaleY: 0,\n          duration: duration - 1\n        },\n        `start+=${duration * index}`,\n      )\n      .from(\n        svgContainer.value!.querySelector(`.branch-${index + 1}`), {\n          strokeDashoffset: 186,\n          duration: duration - 2\n        },\n        `start+=${duration * (index + 1) - 1}`,\n      )\n\n    return timeline\n  }\n\n  function animateTimeline(timeline: GSAPTimeline, duration: number): void {\n    let index = 0\n\n    addNodeRefsToItems(TIMELINE).forEach((item) => {\n      const {\n        type\n      } = item\n\n      if (type === NodeTypes.CHECKPOINT && item.shouldDrawLine) {\n        const {\n          next,\n          prev\n        } = item\n\n        if (prev && prev.type === NodeTypes.DIVERGE)\n          addDivergingBranchLineAnimation(timeline, duration, index)\n        else if (next && next.type === NodeTypes.CONVERGE)\n          addConvergingBranchLineAnimation(timeline, duration, index)\n        else\n          addLineSvgAnimation(timeline, duration, index)\n\n        index++\n      }\n    })\n  }\n\n  function setTimelineSvg(svgContainer: Ref < HTMLElement | undefined > , timelineSvg: Ref < SVGSVGElement | undefined >\n    ) {\n    const containerWidth = svgContainer.value!.clientWidth\n    svgWidth.value = containerWidth\n\n    const resultSvgString = generateTimelineSvg(TIMELINE)\n    timelineSvg.value!.innerHTML = resultSvgString\n\n    if (isSmallScreen())\n      rightBranchX = 70\n  }\n //slideImg 动画\n  function setSlidesAnimation(timeline: GSAPTimeline): void {\n    svgCheckpointItems.forEach((_, index) => {\n      // all except the first slide\n      if (index !== 0)\n        timeline.fromTo(screenContainer.value!.querySelector(`.slide-${index + 1}`), {\n          opacity: 0\n        }, {\n          opacity: 1\n        })\n\n      // all except the last slide\n      if (index !== svgCheckpointItems.length - 1) {\n        timeline.to(screenContainer.value!.querySelector(`.slide-${index + 1}`), {\n          opacity: 0,\n          delay: 2.35,\n        })\n      }\n    })\n  }\n\n  function initScrollTrigger(): {\n    timeline: GSAPTimeline\n    duration: number\n  } {\n    const timeline = gsap.timeline({\n      defaults: {\n        ease: Linear.easeNone,\n        duration: 0.44\n      }\n    }).addLabel('start')\n    let duration: number\n    let trigger: HTMLDivElement\n    let start: string\n    let end: string\n    let additionalConfig = {}\n\n    // Slide as a trigger for Desktop\n    if (props.isDesktop && !isSmallScreen()) {\n      // Animation for right side slides\n      setSlidesAnimation(timeline)\n\n      const platformHeight = screenContainer.value!.getBoundingClientRect().height\n\n      trigger = screenContainer.value!\n        start = `top ${(window.innerHeight - platformHeight) / 2}`\n      end = `+=${svgLength - platformHeight}`\n      additionalConfig = {\n        pin: true,\n        pinSpacing: true,\n      }\n      duration = timeline.totalDuration() / 15 //TODO 会影响图片展示的间隔\n    } else {\n      // Clearing out the right side on mobile devices\n      screenContainer.value!.innerHTML = ''\n\n      trigger = svgContainer.value!\n        start = 'top center'\n      end = `+=${svgLength}`\n      duration = 3\n    }\n\n    ScrollTrigger.create({\n      ...additionalConfig,\n      trigger,\n      start,\n      end,\n      scrub: 0,\n      animation: timeline,\n    })\n    return {\n      timeline,\n      duration\n    }\n  }\n\n  const svgCheckpointItems = TIMELINE.filter(item => item.type === NodeTypes.CHECKPOINT && item.shouldDrawLine)\n  // const svgLength = svgCheckpointItems ? .length * separation\n  const svgLength = svgCheckpointItems && svgCheckpointItems.length * separation;\n  onMounted(() => {\n    // Generate and set the timeline svg\n    setTimelineSvg(svgContainer, timelineSvg)\n\n    const {\n      timeline,\n      duration\n    }: {\n      timeline: GSAPTimeline,\n      duration: number\n    } = initScrollTrigger()\n\n    // Animation for Timeline SVG\n    animateTimeline(timeline, duration)\n  })\n\n  interface LinkNode {\n    next ? : LinkedTimelineNode\n    prev ? : LinkedTimelineNode\n  }\n\n  type LinkedTimelineNode = LinkedCheckpointNode | LinkedBranchNode\n\n  type LinkedCheckpointNode = LinkNode & CheckpointNode\n\n  type LinkedBranchNode = LinkNode & BranchNode\n</script>\n\n<template>\n  <section :id=\"MENULINKS[3].ref\"\n    class=\"section-container relative min-h-screen w-full flex flex-col select-none justify-center py-8\">\n    <div class=\"flex flex-col\">\n      <p class=\"section-title-sm seq\">\n        MILESTONES\n      </p>\n      <h1 class=\"section-heading seq mt-2\">\n        时间线\n      </h1>\n      <h2 class=\"seq mt-2 w-full text-2xl md:max-w-2xl\">\n        隐藏着什么呢？\n      </h2>\n    </div>\n    <div class=\"grid grid-cols-12 mt-20 gap-4\">\n      <div ref=\"svgContainer\" class=\"line-svg col-span-12 md:col-span-6\">\n        <svg ref=\"timelineSvg\" :width=\"svgWidth\" :height=\"svgLength\" :viewBox=\"`0 0 ${svgWidth} ${svgLength}`\"\n          fill=\"none\" />\n      </div>\n      <div class=\"col-span-12 hidden md:col-span-6 md:flex\">\n        <div ref=\"screenContainer\" class=\"h-96  max-w-full overflow-hidden  bg-transparent w-200 \">\n          <div class=\"relative h-full w-full \">\n            <div class=\"absolute left-0 top-0 h-full w-full\">\n              <img v-for=\"(item, idx) in svgCheckpointItems\" :key=\"`${item.title}-${idx}`\" alt=\"Timeline\" layout=\"fill\"\n                :class=\"`w-full absolute top-0 object-cover slide-${idx + 1}`\" :src=\"`${item.slideImage}`\">\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </section>\n</template>",
      "start": 1715670304748,
      "end": 1715670304908,
      "sourcemaps": null
    },
    {
      "name": "unocss:transformers:pre",
      "start": 1715670304908,
      "end": 1715670304909,
      "order": "pre"
    },
    {
      "name": "unocss:transformers:pre",
      "start": 1715670304908,
      "end": 1715670304909,
      "order": "pre"
    },
    {
      "name": "unocss:global:build:scan",
      "start": 1715670304909,
      "end": 1715670304910,
      "order": "pre"
    },
    {
      "name": "unocss:global:build:scan",
      "start": 1715670304909,
      "end": 1715670304914,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1715670304914,
      "end": 1715670304914,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1715670304914,
      "end": 1715670304914,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1715670304914,
      "end": 1715670304914,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1715670304914,
      "end": 1715670304914,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1715670304914,
      "end": 1715670304914,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1715670304914,
      "end": 1715670304914,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1715670304915,
      "end": 1715670304915,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1715670304915,
      "end": 1715670304915,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1715670304915,
      "end": 1715670304915,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "result": "import _sfc_main from \"D:/CODE/Blog/nuxt-main/components/home/timeline.vue?vue&type=script&setup=true&name=TimelineSection&lang.ts\";\nexport * from \"D:/CODE/Blog/nuxt-main/components/home/timeline.vue?vue&type=script&setup=true&name=TimelineSection&lang.ts\";\nimport { useSSRContext as __vite_useSSRContext } from \"vue\";\nconst _sfc_setup = _sfc_main.setup;\n_sfc_main.setup = (props, ctx) => {\n  const ssrContext = __vite_useSSRContext();\n  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add(\"components/home/timeline.vue\");\n  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;\n};\nexport default _sfc_main;\n",
      "start": 1715670304915,
      "end": 1715670305047,
      "order": "normal",
      "sourcemaps": {
        "mappings": ""
      }
    },
    {
      "name": "vite:vue-jsx",
      "start": 1715670305047,
      "end": 1715670305047,
      "order": "normal"
    },
    {
      "name": "unocss:transformers:undefined",
      "start": 1715670305047,
      "end": 1715670305047,
      "order": "normal"
    },
    {
      "name": "unocss:transformers:undefined",
      "start": 1715670305047,
      "end": 1715670305047,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1715670305047,
      "end": 1715670305047,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1715670305047,
      "end": 1715670305047,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1715670305047,
      "end": 1715670305047,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1715670305047,
      "end": 1715670305047,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1715670305047,
      "end": 1715670305047,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1715670305047,
      "end": 1715670305047,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1715670305047,
      "end": 1715670305047,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1715670305047,
      "end": 1715670305048,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1715670305048,
      "end": 1715670305048,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1715670305048,
      "end": 1715670305048,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1715670305048,
      "end": 1715670305048,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1715670305048,
      "end": 1715670305048,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1715670305048,
      "end": 1715670305048,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1715670305048,
      "end": 1715670305048,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1715670305048,
      "end": 1715670305048,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1715670305048,
      "end": 1715670305048,
      "order": "normal"
    },
    {
      "name": "unocss:transformers:post",
      "start": 1715670305048,
      "end": 1715670305048,
      "order": "post"
    },
    {
      "name": "unocss:transformers:post",
      "start": 1715670305048,
      "end": 1715670305048,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1715670305048,
      "end": 1715670305048,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1715670305048,
      "end": 1715670305048,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1715670305048,
      "end": 1715670305050,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1715670305048,
      "end": 1715670305050,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1715670305055,
      "end": 1715670305055,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1715670305055,
      "end": 1715670305055,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1715670305055,
      "end": 1715670305055,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1715670305055,
      "end": 1715670305055,
      "order": "post"
    },
    {
      "name": "element-plus:transform",
      "start": 1715670305055,
      "end": 1715670305055,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1715670305055,
      "end": 1715670305056,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1715670305056,
      "end": 1715670305056,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1715670305056,
      "end": 1715670305056,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1715670305056,
      "end": 1715670305056,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1715670305056,
      "end": 1715670305056,
      "order": "normal"
    }
  ]
}
