{
  "resolvedId": "D:/CODE/Blog/nuxt-main/components/home/timeline.vue?vue&type=script&setup=true&name=TimelineSection&lang.ts",
  "transforms": [
    {
      "name": "vite:vue",
      "result": "import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, renderList as _renderList, Fragment as _Fragment, normalizeClass as _normalizeClass } from \"vue\"\n\nconst _hoisted_1 = [\"id\"]\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", { class: \"flex flex-col\" }, [\n  /*#__PURE__*/_createElementVNode(\"p\", { class: \"section-title-sm seq\" }, \" MILESTONES \"),\n  /*#__PURE__*/_createElementVNode(\"h1\", { class: \"section-heading seq mt-2\" }, \" 时间线 \"),\n  /*#__PURE__*/_createElementVNode(\"h2\", { class: \"seq mt-2 w-full text-2xl md:max-w-2xl\" }, \" 隐藏着什么呢？ \")\n], -1)\nconst _hoisted_3 = { class: \"grid grid-cols-12 mt-20 gap-4\" }\nconst _hoisted_4 = [\"width\", \"height\", \"viewBox\"]\nconst _hoisted_5 = { class: \"col-span-12 hidden md:col-span-6 md:flex\" }\nconst _hoisted_6 = { class: \"relative h-full w-full\" }\nconst _hoisted_7 = { class: \"absolute left-0 top-0 h-full w-full\" }\nconst _hoisted_8 = [\"src\"]\n\nimport {\n    Linear,\n    gsap\n  } from 'gsap'\n  import {\n    ScrollTrigger\n  } from 'gsap/dist/ScrollTrigger'\n  import {\n    Branch,\n    type BranchNode,\n    type CheckpointNode,\n    type IDesktop,\n    ItemSize,\n    MENULINKS,\n    NodeTypes,\n    TIMELINE,\n    type TimelineNodeV2,\n    isSmallScreen,\n  } from '~/store/constants'\n\n  const svgColor = '#9CA3AF'\n  const animColor = '#FCD34D'\n  const separation = 450\n  const strokeWidth = 2\n  const leftBranchX = 13\n  const curveLength = 150\n  const dotSize = 26\n  interface LinkNode {\n    next ? : LinkedTimelineNode\n    prev ? : LinkedTimelineNode\n  }\n\n  type LinkedTimelineNode = LinkedCheckpointNode | LinkedBranchNode\n\n  type LinkedCheckpointNode = LinkNode & CheckpointNode\n\n  type LinkedBranchNode = LinkNode & BranchNode\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'timeline',\n  props: {\n    isDesktop: { type: Boolean }\n  },\n  setup(__props: any) {\n\n  const props = __props\n  const timelineSvg: Ref < SVGSVGElement | undefined > = ref(undefined)\n  const svgContainer: Ref < HTMLDivElement | undefined > = ref(undefined)\n  const screenContainer: Ref < HTMLDivElement | undefined > = ref(undefined)\n\n  const svgWidth = ref(400)\n  let rightBranchX = 109\n\n  function addNodeRefsToItems(timeline: Array < TimelineNodeV2 > ): Array < LinkedTimelineNode > {\n    return timeline.map((node, idx) => ({\n      ...node,\n      next: timeline[idx + 1],\n      prev: timeline[idx - 1],\n    }))\n  }\n\n  function generateTimelineSvg(timeline: Array < TimelineNodeV2 > ): string {\n    let index = 1\n    let y = dotSize / 2\n    const timelineStyle = `<style>.str, .dot{stroke-width: ${strokeWidth}px}.anim-branch{stroke-dasharray: 186}</style>`\n    let isDiverged = false\n\n    const timelineSvg = addNodeRefsToItems(timeline).reduce((svg: string, node: LinkedTimelineNode) => {\n      const {\n        type,\n        next\n      } = node\n      let lineY = y\n      let dotY = y + separation / 2\n\n      switch (type) {\n        case NodeTypes.CHECKPOINT: {\n          const {\n            shouldDrawLine\n          } = node\n\n          // special handling for last checkpoint\n          if (!next)\n            lineY = y - separation / 2\n\n          // special handling for dot without line\n          if (!shouldDrawLine)\n            dotY = y\n\n          if (shouldDrawLine) {\n            // TO DO fix syntax\n            svg = shouldDrawLine ? `${drawLine(node, lineY, index, isDiverged)}${svg}` : svg\n            y = y + separation\n            index++\n          }\n\n          svg = svg.concat(drawDot(node, dotY, isDiverged))\n        }\n        break\n      case NodeTypes.DIVERGE:\n        isDiverged = true\n        svg = `${drawBranch(node, y, index)}${svg}`\n        break\n      case NodeTypes.CONVERGE:\n        isDiverged = false\n        // Drawing CONVERGE branch with previous line and index\n        svg = `${drawBranch(node, y - separation, index - 1)}${svg}`\n        break\n      }\n\n      return svg\n    }, timelineStyle)\n\n    return timelineSvg\n  }\n\n  function getDotString(x: number, y: number) {\n    return `<rect class='dot' width=${dotSize} height=${dotSize} fill='#111827' x=${x - dotSize / 2} y=${\n    y - dotSize / 2\n  } ></rect><circle cx=${x} cy=${y} r='7' stroke=${svgColor} class='dot' ></circle>`\n  }\n\n  function drawDot(timelineNode: LinkedCheckpointNode, y: number, isDiverged: boolean) {\n    const {\n      next,\n      alignment\n    } = timelineNode as LinkedCheckpointNode\n\n    // Diverging\n    if (next && next.type === NodeTypes.DIVERGE)\n      y = y - curveLength + 6 * dotSize\n\n    // Converging\n    if (next && next.type === NodeTypes.CONVERGE)\n      y = y + curveLength - 6 * dotSize\n\n    const dotString = getDotString(alignment === Branch.LEFT ? leftBranchX : rightBranchX, y)\n    const textString = addText(timelineNode, y, isDiverged)\n    return `${textString}${dotString}`\n  }\n\n  function addText(timelineNode: LinkedCheckpointNode, y: number, isDiverged: boolean) {\n    const {\n      title,\n      subtitle,\n      size,\n      image\n    } = timelineNode\n\n    const offset = isDiverged ? rightBranchX : 10\n    const foreignObjectX = dotSize / 2 + 10 + offset\n    const foreignObjectY = y - dotSize / 2\n    const foreignObjectWidth = svgWidth.value - (dotSize / 2 + 10 + offset)\n\n    const titleSizeClass = size === ItemSize.LARGE ? 'text-6xl' : 'text-2xl'\n    const logoString = image ?\n      `<img src='${image}' class='h-8 mb-2' loading='lazy' width='100' height='32' alt='${image}' />` : ''\n    const subtitleString = subtitle ?\n      `<p class='text-xl mt-2 text-gray-200 font-medium tracking-wide'>${subtitle}</p>` : ''\n\n    return `<foreignObject x=${foreignObjectX} y=${foreignObjectY} width=${foreignObjectWidth} \n        height=${separation}>${logoString}<p class='${titleSizeClass}'>${title}</p>${subtitleString}</foreignObject>`\n  }\n\n  function drawLine(timelineNode: LinkedCheckpointNode, y: number, i: number, isDiverged: boolean) {\n    const {\n      alignment,\n      prev,\n      next\n    } = timelineNode as LinkedCheckpointNode\n\n    const isPrevDiverge = prev && prev.type === NodeTypes.DIVERGE\n    const isNextConverge = next && next.type === NodeTypes.CONVERGE\n\n    const lineY = Math.abs(y + separation)\n\n    // Smaller line for Diverging\n    if (isPrevDiverge)\n      return `<line class='str' x1=${leftBranchX} y1=${y} x2=${leftBranchX} y2=${lineY} stroke=${svgColor} /><line class='str line-${i}' x1=${leftBranchX} y1=${y} x2=${leftBranchX} y2=${lineY} stroke=${animColor} />`\n\n    // Smaller line for Converging\n    if (isNextConverge)\n      return `<line class='str' x1=${leftBranchX} y1=${y} x2=${leftBranchX} y2=${lineY} stroke=${svgColor} /><line class='str line-${i}' x1=${leftBranchX} y1=${y} x2=${leftBranchX} y2=${lineY} stroke=${animColor} />`\n\n    const lineX = alignment === Branch.LEFT ? leftBranchX : rightBranchX\n\n    let str =\n      `<line class='str' x1=${lineX} y1=${y} x2=${lineX} y2=${lineY} stroke=${svgColor} /><line class='str line-${i}' x1=${lineX} y1=${y} x2=${lineX} y2=${lineY} stroke=${animColor} />`\n\n    // If already diverged, draw parallel line to the existing line\n    if (isDiverged) {\n      const divergedLineX = alignment === Branch.LEFT ? rightBranchX : leftBranchX\n      str = str.concat(\n        `<line class='str' x1=${divergedLineX} y1=${y} x2=${divergedLineX} y2=${lineY} stroke=${svgColor} /><line class='str line-${i}' x1=${divergedLineX} y1=${y} x2=${divergedLineX} y2=${lineY} stroke=${animColor} />`,\n      )\n    }\n    return str\n  }\n\n  function drawBranch(timelineNode: LinkedBranchNode, y: number, i: number) {\n    const {\n      type\n    } = timelineNode\n    switch (type) {\n      case NodeTypes.DIVERGE:\n        return `<path class='str' d='M ${leftBranchX} ${y} C ${leftBranchX} ${y + curveLength / 2} ${rightBranchX} ${\n        y + curveLength / 2\n      } ${rightBranchX} ${y + curveLength}' stroke=${svgColor} /><line class='str' x1=${rightBranchX} y1=${\n        y + curveLength\n      } x2=${rightBranchX} y2=${\n        y + separation\n      } stroke=${svgColor} /><path class='str anim-branch branch-${i}' d='M ${leftBranchX} ${y} C ${leftBranchX} ${\n        y + curveLength / 2\n      } ${rightBranchX} ${y + curveLength / 2} ${rightBranchX} ${\n        y + curveLength\n      }' stroke=${animColor} /><line class='str branch-line-${i}' x1=${rightBranchX} y1=${y + curveLength} x2=${rightBranchX} y2=${\n        y + separation\n      } stroke=${animColor} />`\n      case NodeTypes.CONVERGE:\n        return `<path class='str' d='M ${rightBranchX} ${y + separation - curveLength} C ${rightBranchX} ${\n        y + separation - curveLength + curveLength / 2\n      } ${leftBranchX} ${y + separation - curveLength + curveLength / 2} ${leftBranchX} ${\n        y + separation\n      }' stroke=${svgColor} /><line class='str' x1=${rightBranchX} y1=${y} x2=${rightBranchX} y2=${Math.abs(\n        y + separation - curveLength,\n      )} stroke=${svgColor} /><path class='str anim-branch branch-${i}' d='M ${rightBranchX} ${\n        y + separation - curveLength\n      } C ${rightBranchX} ${y + separation - curveLength + curveLength / 2} ${leftBranchX} ${\n        y + separation - curveLength + curveLength / 2\n      } ${leftBranchX} ${\n        y + separation\n      }' stroke=${animColor} /><line class='str branch-line-${i}' x1=${rightBranchX} y1=${y} x2=${rightBranchX} y2=${Math.abs(\n        y + separation - curveLength,\n      )} stroke=${animColor} />`\n      default:\n        return ''\n    }\n  }\n\n  function addLineSvgAnimation(timeline: GSAPTimeline, duration: number, index: number): GSAPTimeline {\n    const startTime = `start+=${duration * index}`\n\n    timeline.from(svgContainer.value!.querySelectorAll(`.line-${index + 1}`), {\n      scaleY: 0,\n      duration\n    }, startTime)\n\n    return timeline\n  }\n\n  function addDivergingBranchLineAnimation(timeline: GSAPTimeline, duration: number, index: number): GSAPTimeline {\n    timeline\n      .from(svgContainer.value!.querySelector(`.line-${index + 1}`), {\n        scaleY: 0,\n        duration\n      }, `start+=${duration * index}`)\n      .from(\n        svgContainer.value!.querySelector(`.branch-${index + 1}`), {\n          strokeDashoffset: 186,\n          duration: duration - 2\n        },\n        `start+=${duration * index}`,\n      )\n      .from(\n        svgContainer.value!.querySelector(`.branch-line-${index + 1}`), {\n          scaleY: 0,\n          duration: duration - 1\n        },\n        `start+=${duration * (index + 1) - 2}`,\n      )\n\n    return timeline\n  }\n\n  function addConvergingBranchLineAnimation(timeline: GSAPTimeline, duration: number, index: number): GSAPTimeline {\n    timeline\n      .from(svgContainer.value!.querySelector(`.line-${index + 1}`), {\n        scaleY: 0,\n        duration\n      }, `start+=${duration * index}`)\n      .from(\n        svgContainer.value!.querySelector(`.branch-line-${index + 1}`), {\n          scaleY: 0,\n          duration: duration - 1\n        },\n        `start+=${duration * index}`,\n      )\n      .from(\n        svgContainer.value!.querySelector(`.branch-${index + 1}`), {\n          strokeDashoffset: 186,\n          duration: duration - 2\n        },\n        `start+=${duration * (index + 1) - 1}`,\n      )\n\n    return timeline\n  }\n\n  function animateTimeline(timeline: GSAPTimeline, duration: number): void {\n    let index = 0\n\n    addNodeRefsToItems(TIMELINE).forEach((item) => {\n      const {\n        type\n      } = item\n\n      if (type === NodeTypes.CHECKPOINT && item.shouldDrawLine) {\n        const {\n          next,\n          prev\n        } = item\n\n        if (prev && prev.type === NodeTypes.DIVERGE)\n          addDivergingBranchLineAnimation(timeline, duration, index)\n        else if (next && next.type === NodeTypes.CONVERGE)\n          addConvergingBranchLineAnimation(timeline, duration, index)\n        else\n          addLineSvgAnimation(timeline, duration, index)\n\n        index++\n      }\n    })\n  }\n\n  function setTimelineSvg(svgContainer: Ref < HTMLElement | undefined > , timelineSvg: Ref < SVGSVGElement | undefined >\n    ) {\n    const containerWidth = svgContainer.value!.clientWidth\n    svgWidth.value = containerWidth\n\n    const resultSvgString = generateTimelineSvg(TIMELINE)\n    timelineSvg.value!.innerHTML = resultSvgString\n\n    if (isSmallScreen())\n      rightBranchX = 70\n  }\n //slideImg 动画\n  function setSlidesAnimation(timeline: GSAPTimeline): void {\n    svgCheckpointItems.forEach((_, index) => {\n      // all except the first slide\n      if (index !== 0)\n        timeline.fromTo(screenContainer.value!.querySelector(`.slide-${index + 1}`), {\n          opacity: 0\n        }, {\n          opacity: 1\n        })\n\n      // all except the last slide\n      if (index !== svgCheckpointItems.length - 1) {\n        timeline.to(screenContainer.value!.querySelector(`.slide-${index + 1}`), {\n          opacity: 0,\n          delay: 2.35,\n        })\n      }\n    })\n  }\n\n  function initScrollTrigger(): {\n    timeline: GSAPTimeline\n    duration: number\n  } {\n    const timeline = gsap.timeline({\n      defaults: {\n        ease: Linear.easeNone,\n        duration: 0.44\n      }\n    }).addLabel('start')\n    let duration: number\n    let trigger: HTMLDivElement\n    let start: string\n    let end: string\n    let additionalConfig = {}\n\n    // Slide as a trigger for Desktop\n    if (props.isDesktop && !isSmallScreen()) {\n      // Animation for right side slides\n      setSlidesAnimation(timeline)\n\n      const platformHeight = screenContainer.value!.getBoundingClientRect().height\n\n      trigger = screenContainer.value!\n        start = `top ${(window.innerHeight - platformHeight) / 2}`\n      end = `+=${svgLength - platformHeight}`\n      additionalConfig = {\n        pin: true,\n        pinSpacing: true,\n      }\n      duration = timeline.totalDuration() / 15 //TODO 会影响图片展示的间隔\n    } else {\n      // Clearing out the right side on mobile devices\n      screenContainer.value!.innerHTML = ''\n\n      trigger = svgContainer.value!\n        start = 'top center'\n      end = `+=${svgLength}`\n      duration = 3\n    }\n\n    ScrollTrigger.create({\n      ...additionalConfig,\n      trigger,\n      start,\n      end,\n      scrub: 0,\n      animation: timeline,\n    })\n    return {\n      timeline,\n      duration\n    }\n  }\n\n  const svgCheckpointItems = TIMELINE.filter(item => item.type === NodeTypes.CHECKPOINT && item.shouldDrawLine)\n  // const svgLength = svgCheckpointItems ? .length * separation\n  const svgLength = svgCheckpointItems && svgCheckpointItems.length * separation;\n  onMounted(() => {\n    // Generate and set the timeline svg\n    setTimelineSvg(svgContainer, timelineSvg)\n\n    const {\n      timeline,\n      duration\n    }: {\n      timeline: GSAPTimeline,\n      duration: number\n    } = initScrollTrigger()\n\n    // Animation for Timeline SVG\n    animateTimeline(timeline, duration)\n  })\n\n  \nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"section\", {\n    id: _unref(MENULINKS)[3].ref,\n    class: \"section-container relative min-h-screen w-full flex flex-col select-none justify-center py-8\"\n  }, [\n    _hoisted_2,\n    _createElementVNode(\"div\", _hoisted_3, [\n      _createElementVNode(\"div\", {\n        ref_key: \"svgContainer\",\n        ref: svgContainer,\n        class: \"line-svg col-span-12 md:col-span-6\"\n      }, [\n        (_openBlock(), _createElementBlock(\"svg\", {\n          ref_key: \"timelineSvg\",\n          ref: timelineSvg,\n          width: _unref(svgWidth),\n          height: _unref(svgLength),\n          viewBox: `0 0 ${_unref(svgWidth)} ${_unref(svgLength)}`,\n          fill: \"none\"\n        }, null, 8, _hoisted_4))\n      ], 512),\n      _createElementVNode(\"div\", _hoisted_5, [\n        _createElementVNode(\"div\", {\n          ref_key: \"screenContainer\",\n          ref: screenContainer,\n          class: \"h-96 max-w-full overflow-hidden bg-transparent w-200\"\n        }, [\n          _createElementVNode(\"div\", _hoisted_6, [\n            _createElementVNode(\"div\", _hoisted_7, [\n              (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_unref(svgCheckpointItems), (item, idx) => {\n                return (_openBlock(), _createElementBlock(\"img\", {\n                  key: `${item.title}-${idx}`,\n                  alt: \"Timeline\",\n                  layout: \"fill\",\n                  class: _normalizeClass(`w-full absolute top-0 object-cover slide-${idx + 1}`),\n                  src: `${item.slideImage}`\n                }, null, 10, _hoisted_8))\n              }), 128))\n            ])\n          ])\n        ], 512)\n      ])\n    ])\n  ], 8, _hoisted_1))\n}\n}\n\n})",
      "start": 1715588493028,
      "end": 1715588493028
    },
    {
      "name": "unocss:transformers:pre",
      "start": 1715588493028,
      "end": 1715588493029,
      "order": "pre"
    },
    {
      "name": "unocss:global:build:scan",
      "start": 1715588493029,
      "end": 1715588493029,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1715588493030,
      "end": 1715588493030,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1715588493030,
      "end": 1715588493030,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1715588493030,
      "end": 1715588493030,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1715588493030,
      "end": 1715588493030,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "result": "import { defineComponent as _defineComponent } from \"vue\";\nimport { unref as _unref, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, renderList as _renderList, Fragment as _Fragment, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = [\"id\"];\nconst _hoisted_2 = /* @__PURE__ */ _createElementVNode(\"div\", { class: \"flex flex-col\" }, [\n  /* @__PURE__ */ _createElementVNode(\"p\", { class: \"section-title-sm seq\" }, \" MILESTONES \"),\n  /* @__PURE__ */ _createElementVNode(\"h1\", { class: \"section-heading seq mt-2\" }, \" 时间线 \"),\n  /* @__PURE__ */ _createElementVNode(\"h2\", { class: \"seq mt-2 w-full text-2xl md:max-w-2xl\" }, \" 隐藏着什么呢？ \")\n], -1);\nconst _hoisted_3 = { class: \"grid grid-cols-12 mt-20 gap-4\" };\nconst _hoisted_4 = [\"width\", \"height\", \"viewBox\"];\nconst _hoisted_5 = { class: \"col-span-12 hidden md:col-span-6 md:flex\" };\nconst _hoisted_6 = { class: \"relative h-full w-full\" };\nconst _hoisted_7 = { class: \"absolute left-0 top-0 h-full w-full\" };\nconst _hoisted_8 = [\"src\"];\nimport {\n  Linear,\n  gsap\n} from \"gsap\";\nimport {\n  ScrollTrigger\n} from \"gsap/dist/ScrollTrigger\";\nimport {\n  Branch,\n  ItemSize,\n  MENULINKS,\n  NodeTypes,\n  TIMELINE,\n  isSmallScreen\n} from \"~/store/constants\";\nconst svgColor = \"#9CA3AF\";\nconst animColor = \"#FCD34D\";\nconst separation = 450;\nconst strokeWidth = 2;\nconst leftBranchX = 13;\nconst curveLength = 150;\nconst dotSize = 26;\nexport default /* @__PURE__ */ _defineComponent({\n  __name: \"timeline\",\n  props: {\n    isDesktop: { type: Boolean }\n  },\n  setup(__props) {\n    const props = __props;\n    const timelineSvg = ref(void 0);\n    const svgContainer = ref(void 0);\n    const screenContainer = ref(void 0);\n    const svgWidth = ref(400);\n    let rightBranchX = 109;\n    function addNodeRefsToItems(timeline) {\n      return timeline.map((node, idx) => ({\n        ...node,\n        next: timeline[idx + 1],\n        prev: timeline[idx - 1]\n      }));\n    }\n    function generateTimelineSvg(timeline) {\n      let index = 1;\n      let y = dotSize / 2;\n      const timelineStyle = `<style>.str, .dot{stroke-width: ${strokeWidth}px}.anim-branch{stroke-dasharray: 186}</style>`;\n      let isDiverged = false;\n      const timelineSvg2 = addNodeRefsToItems(timeline).reduce((svg, node) => {\n        const {\n          type,\n          next\n        } = node;\n        let lineY = y;\n        let dotY = y + separation / 2;\n        switch (type) {\n          case NodeTypes.CHECKPOINT:\n            {\n              const {\n                shouldDrawLine\n              } = node;\n              if (!next)\n                lineY = y - separation / 2;\n              if (!shouldDrawLine)\n                dotY = y;\n              if (shouldDrawLine) {\n                svg = shouldDrawLine ? `${drawLine(node, lineY, index, isDiverged)}${svg}` : svg;\n                y = y + separation;\n                index++;\n              }\n              svg = svg.concat(drawDot(node, dotY, isDiverged));\n            }\n            break;\n          case NodeTypes.DIVERGE:\n            isDiverged = true;\n            svg = `${drawBranch(node, y, index)}${svg}`;\n            break;\n          case NodeTypes.CONVERGE:\n            isDiverged = false;\n            svg = `${drawBranch(node, y - separation, index - 1)}${svg}`;\n            break;\n        }\n        return svg;\n      }, timelineStyle);\n      return timelineSvg2;\n    }\n    function getDotString(x, y) {\n      return `<rect class='dot' width=${dotSize} height=${dotSize} fill='#111827' x=${x - dotSize / 2} y=${y - dotSize / 2} ></rect><circle cx=${x} cy=${y} r='7' stroke=${svgColor} class='dot' ></circle>`;\n    }\n    function drawDot(timelineNode, y, isDiverged) {\n      const {\n        next,\n        alignment\n      } = timelineNode;\n      if (next && next.type === NodeTypes.DIVERGE)\n        y = y - curveLength + 6 * dotSize;\n      if (next && next.type === NodeTypes.CONVERGE)\n        y = y + curveLength - 6 * dotSize;\n      const dotString = getDotString(alignment === Branch.LEFT ? leftBranchX : rightBranchX, y);\n      const textString = addText(timelineNode, y, isDiverged);\n      return `${textString}${dotString}`;\n    }\n    function addText(timelineNode, y, isDiverged) {\n      const {\n        title,\n        subtitle,\n        size,\n        image\n      } = timelineNode;\n      const offset = isDiverged ? rightBranchX : 10;\n      const foreignObjectX = dotSize / 2 + 10 + offset;\n      const foreignObjectY = y - dotSize / 2;\n      const foreignObjectWidth = svgWidth.value - (dotSize / 2 + 10 + offset);\n      const titleSizeClass = size === ItemSize.LARGE ? \"text-6xl\" : \"text-2xl\";\n      const logoString = image ? `<img src='${image}' class='h-8 mb-2' loading='lazy' width='100' height='32' alt='${image}' />` : \"\";\n      const subtitleString = subtitle ? `<p class='text-xl mt-2 text-gray-200 font-medium tracking-wide'>${subtitle}</p>` : \"\";\n      return `<foreignObject x=${foreignObjectX} y=${foreignObjectY} width=${foreignObjectWidth} \n        height=${separation}>${logoString}<p class='${titleSizeClass}'>${title}</p>${subtitleString}</foreignObject>`;\n    }\n    function drawLine(timelineNode, y, i, isDiverged) {\n      const {\n        alignment,\n        prev,\n        next\n      } = timelineNode;\n      const isPrevDiverge = prev && prev.type === NodeTypes.DIVERGE;\n      const isNextConverge = next && next.type === NodeTypes.CONVERGE;\n      const lineY = Math.abs(y + separation);\n      if (isPrevDiverge)\n        return `<line class='str' x1=${leftBranchX} y1=${y} x2=${leftBranchX} y2=${lineY} stroke=${svgColor} /><line class='str line-${i}' x1=${leftBranchX} y1=${y} x2=${leftBranchX} y2=${lineY} stroke=${animColor} />`;\n      if (isNextConverge)\n        return `<line class='str' x1=${leftBranchX} y1=${y} x2=${leftBranchX} y2=${lineY} stroke=${svgColor} /><line class='str line-${i}' x1=${leftBranchX} y1=${y} x2=${leftBranchX} y2=${lineY} stroke=${animColor} />`;\n      const lineX = alignment === Branch.LEFT ? leftBranchX : rightBranchX;\n      let str = `<line class='str' x1=${lineX} y1=${y} x2=${lineX} y2=${lineY} stroke=${svgColor} /><line class='str line-${i}' x1=${lineX} y1=${y} x2=${lineX} y2=${lineY} stroke=${animColor} />`;\n      if (isDiverged) {\n        const divergedLineX = alignment === Branch.LEFT ? rightBranchX : leftBranchX;\n        str = str.concat(\n          `<line class='str' x1=${divergedLineX} y1=${y} x2=${divergedLineX} y2=${lineY} stroke=${svgColor} /><line class='str line-${i}' x1=${divergedLineX} y1=${y} x2=${divergedLineX} y2=${lineY} stroke=${animColor} />`\n        );\n      }\n      return str;\n    }\n    function drawBranch(timelineNode, y, i) {\n      const {\n        type\n      } = timelineNode;\n      switch (type) {\n        case NodeTypes.DIVERGE:\n          return `<path class='str' d='M ${leftBranchX} ${y} C ${leftBranchX} ${y + curveLength / 2} ${rightBranchX} ${y + curveLength / 2} ${rightBranchX} ${y + curveLength}' stroke=${svgColor} /><line class='str' x1=${rightBranchX} y1=${y + curveLength} x2=${rightBranchX} y2=${y + separation} stroke=${svgColor} /><path class='str anim-branch branch-${i}' d='M ${leftBranchX} ${y} C ${leftBranchX} ${y + curveLength / 2} ${rightBranchX} ${y + curveLength / 2} ${rightBranchX} ${y + curveLength}' stroke=${animColor} /><line class='str branch-line-${i}' x1=${rightBranchX} y1=${y + curveLength} x2=${rightBranchX} y2=${y + separation} stroke=${animColor} />`;\n        case NodeTypes.CONVERGE:\n          return `<path class='str' d='M ${rightBranchX} ${y + separation - curveLength} C ${rightBranchX} ${y + separation - curveLength + curveLength / 2} ${leftBranchX} ${y + separation - curveLength + curveLength / 2} ${leftBranchX} ${y + separation}' stroke=${svgColor} /><line class='str' x1=${rightBranchX} y1=${y} x2=${rightBranchX} y2=${Math.abs(\n            y + separation - curveLength\n          )} stroke=${svgColor} /><path class='str anim-branch branch-${i}' d='M ${rightBranchX} ${y + separation - curveLength} C ${rightBranchX} ${y + separation - curveLength + curveLength / 2} ${leftBranchX} ${y + separation - curveLength + curveLength / 2} ${leftBranchX} ${y + separation}' stroke=${animColor} /><line class='str branch-line-${i}' x1=${rightBranchX} y1=${y} x2=${rightBranchX} y2=${Math.abs(\n            y + separation - curveLength\n          )} stroke=${animColor} />`;\n        default:\n          return \"\";\n      }\n    }\n    function addLineSvgAnimation(timeline, duration, index) {\n      const startTime = `start+=${duration * index}`;\n      timeline.from(svgContainer.value.querySelectorAll(`.line-${index + 1}`), {\n        scaleY: 0,\n        duration\n      }, startTime);\n      return timeline;\n    }\n    function addDivergingBranchLineAnimation(timeline, duration, index) {\n      timeline.from(svgContainer.value.querySelector(`.line-${index + 1}`), {\n        scaleY: 0,\n        duration\n      }, `start+=${duration * index}`).from(\n        svgContainer.value.querySelector(`.branch-${index + 1}`),\n        {\n          strokeDashoffset: 186,\n          duration: duration - 2\n        },\n        `start+=${duration * index}`\n      ).from(\n        svgContainer.value.querySelector(`.branch-line-${index + 1}`),\n        {\n          scaleY: 0,\n          duration: duration - 1\n        },\n        `start+=${duration * (index + 1) - 2}`\n      );\n      return timeline;\n    }\n    function addConvergingBranchLineAnimation(timeline, duration, index) {\n      timeline.from(svgContainer.value.querySelector(`.line-${index + 1}`), {\n        scaleY: 0,\n        duration\n      }, `start+=${duration * index}`).from(\n        svgContainer.value.querySelector(`.branch-line-${index + 1}`),\n        {\n          scaleY: 0,\n          duration: duration - 1\n        },\n        `start+=${duration * index}`\n      ).from(\n        svgContainer.value.querySelector(`.branch-${index + 1}`),\n        {\n          strokeDashoffset: 186,\n          duration: duration - 2\n        },\n        `start+=${duration * (index + 1) - 1}`\n      );\n      return timeline;\n    }\n    function animateTimeline(timeline, duration) {\n      let index = 0;\n      addNodeRefsToItems(TIMELINE).forEach((item) => {\n        const {\n          type\n        } = item;\n        if (type === NodeTypes.CHECKPOINT && item.shouldDrawLine) {\n          const {\n            next,\n            prev\n          } = item;\n          if (prev && prev.type === NodeTypes.DIVERGE)\n            addDivergingBranchLineAnimation(timeline, duration, index);\n          else if (next && next.type === NodeTypes.CONVERGE)\n            addConvergingBranchLineAnimation(timeline, duration, index);\n          else\n            addLineSvgAnimation(timeline, duration, index);\n          index++;\n        }\n      });\n    }\n    function setTimelineSvg(svgContainer2, timelineSvg2) {\n      const containerWidth = svgContainer2.value.clientWidth;\n      svgWidth.value = containerWidth;\n      const resultSvgString = generateTimelineSvg(TIMELINE);\n      timelineSvg2.value.innerHTML = resultSvgString;\n      if (isSmallScreen())\n        rightBranchX = 70;\n    }\n    function setSlidesAnimation(timeline) {\n      svgCheckpointItems.forEach((_, index) => {\n        if (index !== 0)\n          timeline.fromTo(screenContainer.value.querySelector(`.slide-${index + 1}`), {\n            opacity: 0\n          }, {\n            opacity: 1\n          });\n        if (index !== svgCheckpointItems.length - 1) {\n          timeline.to(screenContainer.value.querySelector(`.slide-${index + 1}`), {\n            opacity: 0,\n            delay: 2.35\n          });\n        }\n      });\n    }\n    function initScrollTrigger() {\n      const timeline = gsap.timeline({\n        defaults: {\n          ease: Linear.easeNone,\n          duration: 0.44\n        }\n      }).addLabel(\"start\");\n      let duration;\n      let trigger;\n      let start;\n      let end;\n      let additionalConfig = {};\n      if (props.isDesktop && !isSmallScreen()) {\n        setSlidesAnimation(timeline);\n        const platformHeight = screenContainer.value.getBoundingClientRect().height;\n        trigger = screenContainer.value;\n        start = `top ${(window.innerHeight - platformHeight) / 2}`;\n        end = `+=${svgLength - platformHeight}`;\n        additionalConfig = {\n          pin: true,\n          pinSpacing: true\n        };\n        duration = timeline.totalDuration() / 15;\n      } else {\n        screenContainer.value.innerHTML = \"\";\n        trigger = svgContainer.value;\n        start = \"top center\";\n        end = `+=${svgLength}`;\n        duration = 3;\n      }\n      ScrollTrigger.create({\n        ...additionalConfig,\n        trigger,\n        start,\n        end,\n        scrub: 0,\n        animation: timeline\n      });\n      return {\n        timeline,\n        duration\n      };\n    }\n    const svgCheckpointItems = TIMELINE.filter((item) => item.type === NodeTypes.CHECKPOINT && item.shouldDrawLine);\n    const svgLength = svgCheckpointItems && svgCheckpointItems.length * separation;\n    onMounted(() => {\n      setTimelineSvg(svgContainer, timelineSvg);\n      const {\n        timeline,\n        duration\n      } = initScrollTrigger();\n      animateTimeline(timeline, duration);\n    });\n    return (_ctx, _cache) => {\n      return _openBlock(), _createElementBlock(\"section\", {\n        id: _unref(MENULINKS)[3].ref,\n        class: \"section-container relative min-h-screen w-full flex flex-col select-none justify-center py-8\"\n      }, [\n        _hoisted_2,\n        _createElementVNode(\"div\", _hoisted_3, [\n          _createElementVNode(\"div\", {\n            ref_key: \"svgContainer\",\n            ref: svgContainer,\n            class: \"line-svg col-span-12 md:col-span-6\"\n          }, [\n            (_openBlock(), _createElementBlock(\"svg\", {\n              ref_key: \"timelineSvg\",\n              ref: timelineSvg,\n              width: _unref(svgWidth),\n              height: _unref(svgLength),\n              viewBox: `0 0 ${_unref(svgWidth)} ${_unref(svgLength)}`,\n              fill: \"none\"\n            }, null, 8, _hoisted_4))\n          ], 512),\n          _createElementVNode(\"div\", _hoisted_5, [\n            _createElementVNode(\"div\", {\n              ref_key: \"screenContainer\",\n              ref: screenContainer,\n              class: \"h-96 max-w-full overflow-hidden bg-transparent w-200\"\n            }, [\n              _createElementVNode(\"div\", _hoisted_6, [\n                _createElementVNode(\"div\", _hoisted_7, [\n                  (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_unref(svgCheckpointItems), (item, idx) => {\n                    return _openBlock(), _createElementBlock(\"img\", {\n                      key: `${item.title}-${idx}`,\n                      alt: \"Timeline\",\n                      layout: \"fill\",\n                      class: _normalizeClass(`w-full absolute top-0 object-cover slide-${idx + 1}`),\n                      src: `${item.slideImage}`\n                    }, null, 10, _hoisted_8);\n                  }), 128))\n                ])\n              ])\n            ], 512)\n          ])\n        ])\n      ], 8, _hoisted_1);\n    };\n  }\n});\n",
      "start": 1715588493030,
      "end": 1715588493191,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/CODE/Blog/nuxt-main/components/home/timeline.vue?vue&type=script&setup=true&name=TimelineSection&lang.ts"
        ],
        "sourcesContent": [
          "import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, renderList as _renderList, Fragment as _Fragment, normalizeClass as _normalizeClass } from \"vue\"\n\nconst _hoisted_1 = [\"id\"]\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", { class: \"flex flex-col\" }, [\n  /*#__PURE__*/_createElementVNode(\"p\", { class: \"section-title-sm seq\" }, \" MILESTONES \"),\n  /*#__PURE__*/_createElementVNode(\"h1\", { class: \"section-heading seq mt-2\" }, \" 时间线 \"),\n  /*#__PURE__*/_createElementVNode(\"h2\", { class: \"seq mt-2 w-full text-2xl md:max-w-2xl\" }, \" 隐藏着什么呢？ \")\n], -1)\nconst _hoisted_3 = { class: \"grid grid-cols-12 mt-20 gap-4\" }\nconst _hoisted_4 = [\"width\", \"height\", \"viewBox\"]\nconst _hoisted_5 = { class: \"col-span-12 hidden md:col-span-6 md:flex\" }\nconst _hoisted_6 = { class: \"relative h-full w-full\" }\nconst _hoisted_7 = { class: \"absolute left-0 top-0 h-full w-full\" }\nconst _hoisted_8 = [\"src\"]\n\nimport {\n    Linear,\n    gsap\n  } from 'gsap'\n  import {\n    ScrollTrigger\n  } from 'gsap/dist/ScrollTrigger'\n  import {\n    Branch,\n    type BranchNode,\n    type CheckpointNode,\n    type IDesktop,\n    ItemSize,\n    MENULINKS,\n    NodeTypes,\n    TIMELINE,\n    type TimelineNodeV2,\n    isSmallScreen,\n  } from '~/store/constants'\n\n  const svgColor = '#9CA3AF'\n  const animColor = '#FCD34D'\n  const separation = 450\n  const strokeWidth = 2\n  const leftBranchX = 13\n  const curveLength = 150\n  const dotSize = 26\n  interface LinkNode {\n    next ? : LinkedTimelineNode\n    prev ? : LinkedTimelineNode\n  }\n\n  type LinkedTimelineNode = LinkedCheckpointNode | LinkedBranchNode\n\n  type LinkedCheckpointNode = LinkNode & CheckpointNode\n\n  type LinkedBranchNode = LinkNode & BranchNode\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'timeline',\n  props: {\n    isDesktop: { type: Boolean }\n  },\n  setup(__props: any) {\n\n  const props = __props\n  const timelineSvg: Ref < SVGSVGElement | undefined > = ref(undefined)\n  const svgContainer: Ref < HTMLDivElement | undefined > = ref(undefined)\n  const screenContainer: Ref < HTMLDivElement | undefined > = ref(undefined)\n\n  const svgWidth = ref(400)\n  let rightBranchX = 109\n\n  function addNodeRefsToItems(timeline: Array < TimelineNodeV2 > ): Array < LinkedTimelineNode > {\n    return timeline.map((node, idx) => ({\n      ...node,\n      next: timeline[idx + 1],\n      prev: timeline[idx - 1],\n    }))\n  }\n\n  function generateTimelineSvg(timeline: Array < TimelineNodeV2 > ): string {\n    let index = 1\n    let y = dotSize / 2\n    const timelineStyle = `<style>.str, .dot{stroke-width: ${strokeWidth}px}.anim-branch{stroke-dasharray: 186}</style>`\n    let isDiverged = false\n\n    const timelineSvg = addNodeRefsToItems(timeline).reduce((svg: string, node: LinkedTimelineNode) => {\n      const {\n        type,\n        next\n      } = node\n      let lineY = y\n      let dotY = y + separation / 2\n\n      switch (type) {\n        case NodeTypes.CHECKPOINT: {\n          const {\n            shouldDrawLine\n          } = node\n\n          // special handling for last checkpoint\n          if (!next)\n            lineY = y - separation / 2\n\n          // special handling for dot without line\n          if (!shouldDrawLine)\n            dotY = y\n\n          if (shouldDrawLine) {\n            // TO DO fix syntax\n            svg = shouldDrawLine ? `${drawLine(node, lineY, index, isDiverged)}${svg}` : svg\n            y = y + separation\n            index++\n          }\n\n          svg = svg.concat(drawDot(node, dotY, isDiverged))\n        }\n        break\n      case NodeTypes.DIVERGE:\n        isDiverged = true\n        svg = `${drawBranch(node, y, index)}${svg}`\n        break\n      case NodeTypes.CONVERGE:\n        isDiverged = false\n        // Drawing CONVERGE branch with previous line and index\n        svg = `${drawBranch(node, y - separation, index - 1)}${svg}`\n        break\n      }\n\n      return svg\n    }, timelineStyle)\n\n    return timelineSvg\n  }\n\n  function getDotString(x: number, y: number) {\n    return `<rect class='dot' width=${dotSize} height=${dotSize} fill='#111827' x=${x - dotSize / 2} y=${\n    y - dotSize / 2\n  } ></rect><circle cx=${x} cy=${y} r='7' stroke=${svgColor} class='dot' ></circle>`\n  }\n\n  function drawDot(timelineNode: LinkedCheckpointNode, y: number, isDiverged: boolean) {\n    const {\n      next,\n      alignment\n    } = timelineNode as LinkedCheckpointNode\n\n    // Diverging\n    if (next && next.type === NodeTypes.DIVERGE)\n      y = y - curveLength + 6 * dotSize\n\n    // Converging\n    if (next && next.type === NodeTypes.CONVERGE)\n      y = y + curveLength - 6 * dotSize\n\n    const dotString = getDotString(alignment === Branch.LEFT ? leftBranchX : rightBranchX, y)\n    const textString = addText(timelineNode, y, isDiverged)\n    return `${textString}${dotString}`\n  }\n\n  function addText(timelineNode: LinkedCheckpointNode, y: number, isDiverged: boolean) {\n    const {\n      title,\n      subtitle,\n      size,\n      image\n    } = timelineNode\n\n    const offset = isDiverged ? rightBranchX : 10\n    const foreignObjectX = dotSize / 2 + 10 + offset\n    const foreignObjectY = y - dotSize / 2\n    const foreignObjectWidth = svgWidth.value - (dotSize / 2 + 10 + offset)\n\n    const titleSizeClass = size === ItemSize.LARGE ? 'text-6xl' : 'text-2xl'\n    const logoString = image ?\n      `<img src='${image}' class='h-8 mb-2' loading='lazy' width='100' height='32' alt='${image}' />` : ''\n    const subtitleString = subtitle ?\n      `<p class='text-xl mt-2 text-gray-200 font-medium tracking-wide'>${subtitle}</p>` : ''\n\n    return `<foreignObject x=${foreignObjectX} y=${foreignObjectY} width=${foreignObjectWidth} \n        height=${separation}>${logoString}<p class='${titleSizeClass}'>${title}</p>${subtitleString}</foreignObject>`\n  }\n\n  function drawLine(timelineNode: LinkedCheckpointNode, y: number, i: number, isDiverged: boolean) {\n    const {\n      alignment,\n      prev,\n      next\n    } = timelineNode as LinkedCheckpointNode\n\n    const isPrevDiverge = prev && prev.type === NodeTypes.DIVERGE\n    const isNextConverge = next && next.type === NodeTypes.CONVERGE\n\n    const lineY = Math.abs(y + separation)\n\n    // Smaller line for Diverging\n    if (isPrevDiverge)\n      return `<line class='str' x1=${leftBranchX} y1=${y} x2=${leftBranchX} y2=${lineY} stroke=${svgColor} /><line class='str line-${i}' x1=${leftBranchX} y1=${y} x2=${leftBranchX} y2=${lineY} stroke=${animColor} />`\n\n    // Smaller line for Converging\n    if (isNextConverge)\n      return `<line class='str' x1=${leftBranchX} y1=${y} x2=${leftBranchX} y2=${lineY} stroke=${svgColor} /><line class='str line-${i}' x1=${leftBranchX} y1=${y} x2=${leftBranchX} y2=${lineY} stroke=${animColor} />`\n\n    const lineX = alignment === Branch.LEFT ? leftBranchX : rightBranchX\n\n    let str =\n      `<line class='str' x1=${lineX} y1=${y} x2=${lineX} y2=${lineY} stroke=${svgColor} /><line class='str line-${i}' x1=${lineX} y1=${y} x2=${lineX} y2=${lineY} stroke=${animColor} />`\n\n    // If already diverged, draw parallel line to the existing line\n    if (isDiverged) {\n      const divergedLineX = alignment === Branch.LEFT ? rightBranchX : leftBranchX\n      str = str.concat(\n        `<line class='str' x1=${divergedLineX} y1=${y} x2=${divergedLineX} y2=${lineY} stroke=${svgColor} /><line class='str line-${i}' x1=${divergedLineX} y1=${y} x2=${divergedLineX} y2=${lineY} stroke=${animColor} />`,\n      )\n    }\n    return str\n  }\n\n  function drawBranch(timelineNode: LinkedBranchNode, y: number, i: number) {\n    const {\n      type\n    } = timelineNode\n    switch (type) {\n      case NodeTypes.DIVERGE:\n        return `<path class='str' d='M ${leftBranchX} ${y} C ${leftBranchX} ${y + curveLength / 2} ${rightBranchX} ${\n        y + curveLength / 2\n      } ${rightBranchX} ${y + curveLength}' stroke=${svgColor} /><line class='str' x1=${rightBranchX} y1=${\n        y + curveLength\n      } x2=${rightBranchX} y2=${\n        y + separation\n      } stroke=${svgColor} /><path class='str anim-branch branch-${i}' d='M ${leftBranchX} ${y} C ${leftBranchX} ${\n        y + curveLength / 2\n      } ${rightBranchX} ${y + curveLength / 2} ${rightBranchX} ${\n        y + curveLength\n      }' stroke=${animColor} /><line class='str branch-line-${i}' x1=${rightBranchX} y1=${y + curveLength} x2=${rightBranchX} y2=${\n        y + separation\n      } stroke=${animColor} />`\n      case NodeTypes.CONVERGE:\n        return `<path class='str' d='M ${rightBranchX} ${y + separation - curveLength} C ${rightBranchX} ${\n        y + separation - curveLength + curveLength / 2\n      } ${leftBranchX} ${y + separation - curveLength + curveLength / 2} ${leftBranchX} ${\n        y + separation\n      }' stroke=${svgColor} /><line class='str' x1=${rightBranchX} y1=${y} x2=${rightBranchX} y2=${Math.abs(\n        y + separation - curveLength,\n      )} stroke=${svgColor} /><path class='str anim-branch branch-${i}' d='M ${rightBranchX} ${\n        y + separation - curveLength\n      } C ${rightBranchX} ${y + separation - curveLength + curveLength / 2} ${leftBranchX} ${\n        y + separation - curveLength + curveLength / 2\n      } ${leftBranchX} ${\n        y + separation\n      }' stroke=${animColor} /><line class='str branch-line-${i}' x1=${rightBranchX} y1=${y} x2=${rightBranchX} y2=${Math.abs(\n        y + separation - curveLength,\n      )} stroke=${animColor} />`\n      default:\n        return ''\n    }\n  }\n\n  function addLineSvgAnimation(timeline: GSAPTimeline, duration: number, index: number): GSAPTimeline {\n    const startTime = `start+=${duration * index}`\n\n    timeline.from(svgContainer.value!.querySelectorAll(`.line-${index + 1}`), {\n      scaleY: 0,\n      duration\n    }, startTime)\n\n    return timeline\n  }\n\n  function addDivergingBranchLineAnimation(timeline: GSAPTimeline, duration: number, index: number): GSAPTimeline {\n    timeline\n      .from(svgContainer.value!.querySelector(`.line-${index + 1}`), {\n        scaleY: 0,\n        duration\n      }, `start+=${duration * index}`)\n      .from(\n        svgContainer.value!.querySelector(`.branch-${index + 1}`), {\n          strokeDashoffset: 186,\n          duration: duration - 2\n        },\n        `start+=${duration * index}`,\n      )\n      .from(\n        svgContainer.value!.querySelector(`.branch-line-${index + 1}`), {\n          scaleY: 0,\n          duration: duration - 1\n        },\n        `start+=${duration * (index + 1) - 2}`,\n      )\n\n    return timeline\n  }\n\n  function addConvergingBranchLineAnimation(timeline: GSAPTimeline, duration: number, index: number): GSAPTimeline {\n    timeline\n      .from(svgContainer.value!.querySelector(`.line-${index + 1}`), {\n        scaleY: 0,\n        duration\n      }, `start+=${duration * index}`)\n      .from(\n        svgContainer.value!.querySelector(`.branch-line-${index + 1}`), {\n          scaleY: 0,\n          duration: duration - 1\n        },\n        `start+=${duration * index}`,\n      )\n      .from(\n        svgContainer.value!.querySelector(`.branch-${index + 1}`), {\n          strokeDashoffset: 186,\n          duration: duration - 2\n        },\n        `start+=${duration * (index + 1) - 1}`,\n      )\n\n    return timeline\n  }\n\n  function animateTimeline(timeline: GSAPTimeline, duration: number): void {\n    let index = 0\n\n    addNodeRefsToItems(TIMELINE).forEach((item) => {\n      const {\n        type\n      } = item\n\n      if (type === NodeTypes.CHECKPOINT && item.shouldDrawLine) {\n        const {\n          next,\n          prev\n        } = item\n\n        if (prev && prev.type === NodeTypes.DIVERGE)\n          addDivergingBranchLineAnimation(timeline, duration, index)\n        else if (next && next.type === NodeTypes.CONVERGE)\n          addConvergingBranchLineAnimation(timeline, duration, index)\n        else\n          addLineSvgAnimation(timeline, duration, index)\n\n        index++\n      }\n    })\n  }\n\n  function setTimelineSvg(svgContainer: Ref < HTMLElement | undefined > , timelineSvg: Ref < SVGSVGElement | undefined >\n    ) {\n    const containerWidth = svgContainer.value!.clientWidth\n    svgWidth.value = containerWidth\n\n    const resultSvgString = generateTimelineSvg(TIMELINE)\n    timelineSvg.value!.innerHTML = resultSvgString\n\n    if (isSmallScreen())\n      rightBranchX = 70\n  }\n //slideImg 动画\n  function setSlidesAnimation(timeline: GSAPTimeline): void {\n    svgCheckpointItems.forEach((_, index) => {\n      // all except the first slide\n      if (index !== 0)\n        timeline.fromTo(screenContainer.value!.querySelector(`.slide-${index + 1}`), {\n          opacity: 0\n        }, {\n          opacity: 1\n        })\n\n      // all except the last slide\n      if (index !== svgCheckpointItems.length - 1) {\n        timeline.to(screenContainer.value!.querySelector(`.slide-${index + 1}`), {\n          opacity: 0,\n          delay: 2.35,\n        })\n      }\n    })\n  }\n\n  function initScrollTrigger(): {\n    timeline: GSAPTimeline\n    duration: number\n  } {\n    const timeline = gsap.timeline({\n      defaults: {\n        ease: Linear.easeNone,\n        duration: 0.44\n      }\n    }).addLabel('start')\n    let duration: number\n    let trigger: HTMLDivElement\n    let start: string\n    let end: string\n    let additionalConfig = {}\n\n    // Slide as a trigger for Desktop\n    if (props.isDesktop && !isSmallScreen()) {\n      // Animation for right side slides\n      setSlidesAnimation(timeline)\n\n      const platformHeight = screenContainer.value!.getBoundingClientRect().height\n\n      trigger = screenContainer.value!\n        start = `top ${(window.innerHeight - platformHeight) / 2}`\n      end = `+=${svgLength - platformHeight}`\n      additionalConfig = {\n        pin: true,\n        pinSpacing: true,\n      }\n      duration = timeline.totalDuration() / 15 //TODO 会影响图片展示的间隔\n    } else {\n      // Clearing out the right side on mobile devices\n      screenContainer.value!.innerHTML = ''\n\n      trigger = svgContainer.value!\n        start = 'top center'\n      end = `+=${svgLength}`\n      duration = 3\n    }\n\n    ScrollTrigger.create({\n      ...additionalConfig,\n      trigger,\n      start,\n      end,\n      scrub: 0,\n      animation: timeline,\n    })\n    return {\n      timeline,\n      duration\n    }\n  }\n\n  const svgCheckpointItems = TIMELINE.filter(item => item.type === NodeTypes.CHECKPOINT && item.shouldDrawLine)\n  // const svgLength = svgCheckpointItems ? .length * separation\n  const svgLength = svgCheckpointItems && svgCheckpointItems.length * separation;\n  onMounted(() => {\n    // Generate and set the timeline svg\n    setTimelineSvg(svgContainer, timelineSvg)\n\n    const {\n      timeline,\n      duration\n    }: {\n      timeline: GSAPTimeline,\n      duration: number\n    } = initScrollTrigger()\n\n    // Animation for Timeline SVG\n    animateTimeline(timeline, duration)\n  })\n\n  \nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"section\", {\n    id: _unref(MENULINKS)[3].ref,\n    class: \"section-container relative min-h-screen w-full flex flex-col select-none justify-center py-8\"\n  }, [\n    _hoisted_2,\n    _createElementVNode(\"div\", _hoisted_3, [\n      _createElementVNode(\"div\", {\n        ref_key: \"svgContainer\",\n        ref: svgContainer,\n        class: \"line-svg col-span-12 md:col-span-6\"\n      }, [\n        (_openBlock(), _createElementBlock(\"svg\", {\n          ref_key: \"timelineSvg\",\n          ref: timelineSvg,\n          width: _unref(svgWidth),\n          height: _unref(svgLength),\n          viewBox: `0 0 ${_unref(svgWidth)} ${_unref(svgLength)}`,\n          fill: \"none\"\n        }, null, 8, _hoisted_4))\n      ], 512),\n      _createElementVNode(\"div\", _hoisted_5, [\n        _createElementVNode(\"div\", {\n          ref_key: \"screenContainer\",\n          ref: screenContainer,\n          class: \"h-96 max-w-full overflow-hidden bg-transparent w-200\"\n        }, [\n          _createElementVNode(\"div\", _hoisted_6, [\n            _createElementVNode(\"div\", _hoisted_7, [\n              (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_unref(svgCheckpointItems), (item, idx) => {\n                return (_openBlock(), _createElementBlock(\"img\", {\n                  key: `${item.title}-${idx}`,\n                  alt: \"Timeline\",\n                  layout: \"fill\",\n                  class: _normalizeClass(`w-full absolute top-0 object-cover slide-${idx + 1}`),\n                  src: `${item.slideImage}`\n                }, null, 10, _hoisted_8))\n              }), 128))\n            ])\n          ])\n        ], 512)\n      ])\n    ])\n  ], 8, _hoisted_1))\n}\n}\n\n})"
        ],
        "mappings": "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",
        "names": [
          "timelineSvg",
          "svgContainer"
        ]
      }
    },
    {
      "name": "vite:json",
      "start": 1715588493191,
      "end": 1715588493191,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1715588493191,
      "end": 1715588493191,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1715588493191,
      "end": 1715588493191,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1715588493191,
      "end": 1715588493191,
      "order": "normal"
    },
    {
      "name": "unocss:transformers:undefined",
      "start": 1715588493191,
      "end": 1715588493191,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1715588493191,
      "end": 1715588493191,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1715588493191,
      "end": 1715588493191,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1715588493191,
      "end": 1715588493191,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1715588493191,
      "end": 1715588493191,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1715588493191,
      "end": 1715588493191,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1715588493191,
      "end": 1715588493191,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1715588493191,
      "end": 1715588493192,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1715588493192,
      "end": 1715588493192,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1715588493192,
      "end": 1715588493192,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1715588493192,
      "end": 1715588493192,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1715588493192,
      "end": 1715588493192,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1715588493192,
      "end": 1715588493192,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1715588493192,
      "end": 1715588493192,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1715588493192,
      "end": 1715588493192,
      "order": "normal"
    },
    {
      "name": "unocss:transformers:post",
      "start": 1715588493192,
      "end": 1715588493192,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1715588493192,
      "end": 1715588493192,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "result": "import { ref, onMounted } from 'vue';\nimport { defineComponent as _defineComponent } from \"vue\";\nimport { unref as _unref, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, renderList as _renderList, Fragment as _Fragment, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = [\"id\"];\nconst _hoisted_2 = /* @__PURE__ */ _createElementVNode(\"div\", { class: \"flex flex-col\" }, [\n  /* @__PURE__ */ _createElementVNode(\"p\", { class: \"section-title-sm seq\" }, \" MILESTONES \"),\n  /* @__PURE__ */ _createElementVNode(\"h1\", { class: \"section-heading seq mt-2\" }, \" 时间线 \"),\n  /* @__PURE__ */ _createElementVNode(\"h2\", { class: \"seq mt-2 w-full text-2xl md:max-w-2xl\" }, \" 隐藏着什么呢？ \")\n], -1);\nconst _hoisted_3 = { class: \"grid grid-cols-12 mt-20 gap-4\" };\nconst _hoisted_4 = [\"width\", \"height\", \"viewBox\"];\nconst _hoisted_5 = { class: \"col-span-12 hidden md:col-span-6 md:flex\" };\nconst _hoisted_6 = { class: \"relative h-full w-full\" };\nconst _hoisted_7 = { class: \"absolute left-0 top-0 h-full w-full\" };\nconst _hoisted_8 = [\"src\"];\nimport {\n  Linear,\n  gsap\n} from \"gsap\";\nimport {\n  ScrollTrigger\n} from \"gsap/dist/ScrollTrigger\";\nimport {\n  Branch,\n  ItemSize,\n  MENULINKS,\n  NodeTypes,\n  TIMELINE,\n  isSmallScreen\n} from \"~/store/constants\";\nconst svgColor = \"#9CA3AF\";\nconst animColor = \"#FCD34D\";\nconst separation = 450;\nconst strokeWidth = 2;\nconst leftBranchX = 13;\nconst curveLength = 150;\nconst dotSize = 26;\nexport default /* @__PURE__ */ _defineComponent({\n  __name: \"timeline\",\n  props: {\n    isDesktop: { type: Boolean }\n  },\n  setup(__props) {\n    const props = __props;\n    const timelineSvg = ref(void 0);\n    const svgContainer = ref(void 0);\n    const screenContainer = ref(void 0);\n    const svgWidth = ref(400);\n    let rightBranchX = 109;\n    function addNodeRefsToItems(timeline) {\n      return timeline.map((node, idx) => ({\n        ...node,\n        next: timeline[idx + 1],\n        prev: timeline[idx - 1]\n      }));\n    }\n    function generateTimelineSvg(timeline) {\n      let index = 1;\n      let y = dotSize / 2;\n      const timelineStyle = `<style>.str, .dot{stroke-width: ${strokeWidth}px}.anim-branch{stroke-dasharray: 186}</style>`;\n      let isDiverged = false;\n      const timelineSvg2 = addNodeRefsToItems(timeline).reduce((svg, node) => {\n        const {\n          type,\n          next\n        } = node;\n        let lineY = y;\n        let dotY = y + separation / 2;\n        switch (type) {\n          case NodeTypes.CHECKPOINT:\n            {\n              const {\n                shouldDrawLine\n              } = node;\n              if (!next)\n                lineY = y - separation / 2;\n              if (!shouldDrawLine)\n                dotY = y;\n              if (shouldDrawLine) {\n                svg = shouldDrawLine ? `${drawLine(node, lineY, index, isDiverged)}${svg}` : svg;\n                y = y + separation;\n                index++;\n              }\n              svg = svg.concat(drawDot(node, dotY, isDiverged));\n            }\n            break;\n          case NodeTypes.DIVERGE:\n            isDiverged = true;\n            svg = `${drawBranch(node, y, index)}${svg}`;\n            break;\n          case NodeTypes.CONVERGE:\n            isDiverged = false;\n            svg = `${drawBranch(node, y - separation, index - 1)}${svg}`;\n            break;\n        }\n        return svg;\n      }, timelineStyle);\n      return timelineSvg2;\n    }\n    function getDotString(x, y) {\n      return `<rect class='dot' width=${dotSize} height=${dotSize} fill='#111827' x=${x - dotSize / 2} y=${y - dotSize / 2} ></rect><circle cx=${x} cy=${y} r='7' stroke=${svgColor} class='dot' ></circle>`;\n    }\n    function drawDot(timelineNode, y, isDiverged) {\n      const {\n        next,\n        alignment\n      } = timelineNode;\n      if (next && next.type === NodeTypes.DIVERGE)\n        y = y - curveLength + 6 * dotSize;\n      if (next && next.type === NodeTypes.CONVERGE)\n        y = y + curveLength - 6 * dotSize;\n      const dotString = getDotString(alignment === Branch.LEFT ? leftBranchX : rightBranchX, y);\n      const textString = addText(timelineNode, y, isDiverged);\n      return `${textString}${dotString}`;\n    }\n    function addText(timelineNode, y, isDiverged) {\n      const {\n        title,\n        subtitle,\n        size,\n        image\n      } = timelineNode;\n      const offset = isDiverged ? rightBranchX : 10;\n      const foreignObjectX = dotSize / 2 + 10 + offset;\n      const foreignObjectY = y - dotSize / 2;\n      const foreignObjectWidth = svgWidth.value - (dotSize / 2 + 10 + offset);\n      const titleSizeClass = size === ItemSize.LARGE ? \"text-6xl\" : \"text-2xl\";\n      const logoString = image ? `<img src='${image}' class='h-8 mb-2' loading='lazy' width='100' height='32' alt='${image}' />` : \"\";\n      const subtitleString = subtitle ? `<p class='text-xl mt-2 text-gray-200 font-medium tracking-wide'>${subtitle}</p>` : \"\";\n      return `<foreignObject x=${foreignObjectX} y=${foreignObjectY} width=${foreignObjectWidth} \n        height=${separation}>${logoString}<p class='${titleSizeClass}'>${title}</p>${subtitleString}</foreignObject>`;\n    }\n    function drawLine(timelineNode, y, i, isDiverged) {\n      const {\n        alignment,\n        prev,\n        next\n      } = timelineNode;\n      const isPrevDiverge = prev && prev.type === NodeTypes.DIVERGE;\n      const isNextConverge = next && next.type === NodeTypes.CONVERGE;\n      const lineY = Math.abs(y + separation);\n      if (isPrevDiverge)\n        return `<line class='str' x1=${leftBranchX} y1=${y} x2=${leftBranchX} y2=${lineY} stroke=${svgColor} /><line class='str line-${i}' x1=${leftBranchX} y1=${y} x2=${leftBranchX} y2=${lineY} stroke=${animColor} />`;\n      if (isNextConverge)\n        return `<line class='str' x1=${leftBranchX} y1=${y} x2=${leftBranchX} y2=${lineY} stroke=${svgColor} /><line class='str line-${i}' x1=${leftBranchX} y1=${y} x2=${leftBranchX} y2=${lineY} stroke=${animColor} />`;\n      const lineX = alignment === Branch.LEFT ? leftBranchX : rightBranchX;\n      let str = `<line class='str' x1=${lineX} y1=${y} x2=${lineX} y2=${lineY} stroke=${svgColor} /><line class='str line-${i}' x1=${lineX} y1=${y} x2=${lineX} y2=${lineY} stroke=${animColor} />`;\n      if (isDiverged) {\n        const divergedLineX = alignment === Branch.LEFT ? rightBranchX : leftBranchX;\n        str = str.concat(\n          `<line class='str' x1=${divergedLineX} y1=${y} x2=${divergedLineX} y2=${lineY} stroke=${svgColor} /><line class='str line-${i}' x1=${divergedLineX} y1=${y} x2=${divergedLineX} y2=${lineY} stroke=${animColor} />`\n        );\n      }\n      return str;\n    }\n    function drawBranch(timelineNode, y, i) {\n      const {\n        type\n      } = timelineNode;\n      switch (type) {\n        case NodeTypes.DIVERGE:\n          return `<path class='str' d='M ${leftBranchX} ${y} C ${leftBranchX} ${y + curveLength / 2} ${rightBranchX} ${y + curveLength / 2} ${rightBranchX} ${y + curveLength}' stroke=${svgColor} /><line class='str' x1=${rightBranchX} y1=${y + curveLength} x2=${rightBranchX} y2=${y + separation} stroke=${svgColor} /><path class='str anim-branch branch-${i}' d='M ${leftBranchX} ${y} C ${leftBranchX} ${y + curveLength / 2} ${rightBranchX} ${y + curveLength / 2} ${rightBranchX} ${y + curveLength}' stroke=${animColor} /><line class='str branch-line-${i}' x1=${rightBranchX} y1=${y + curveLength} x2=${rightBranchX} y2=${y + separation} stroke=${animColor} />`;\n        case NodeTypes.CONVERGE:\n          return `<path class='str' d='M ${rightBranchX} ${y + separation - curveLength} C ${rightBranchX} ${y + separation - curveLength + curveLength / 2} ${leftBranchX} ${y + separation - curveLength + curveLength / 2} ${leftBranchX} ${y + separation}' stroke=${svgColor} /><line class='str' x1=${rightBranchX} y1=${y} x2=${rightBranchX} y2=${Math.abs(\n            y + separation - curveLength\n          )} stroke=${svgColor} /><path class='str anim-branch branch-${i}' d='M ${rightBranchX} ${y + separation - curveLength} C ${rightBranchX} ${y + separation - curveLength + curveLength / 2} ${leftBranchX} ${y + separation - curveLength + curveLength / 2} ${leftBranchX} ${y + separation}' stroke=${animColor} /><line class='str branch-line-${i}' x1=${rightBranchX} y1=${y} x2=${rightBranchX} y2=${Math.abs(\n            y + separation - curveLength\n          )} stroke=${animColor} />`;\n        default:\n          return \"\";\n      }\n    }\n    function addLineSvgAnimation(timeline, duration, index) {\n      const startTime = `start+=${duration * index}`;\n      timeline.from(svgContainer.value.querySelectorAll(`.line-${index + 1}`), {\n        scaleY: 0,\n        duration\n      }, startTime);\n      return timeline;\n    }\n    function addDivergingBranchLineAnimation(timeline, duration, index) {\n      timeline.from(svgContainer.value.querySelector(`.line-${index + 1}`), {\n        scaleY: 0,\n        duration\n      }, `start+=${duration * index}`).from(\n        svgContainer.value.querySelector(`.branch-${index + 1}`),\n        {\n          strokeDashoffset: 186,\n          duration: duration - 2\n        },\n        `start+=${duration * index}`\n      ).from(\n        svgContainer.value.querySelector(`.branch-line-${index + 1}`),\n        {\n          scaleY: 0,\n          duration: duration - 1\n        },\n        `start+=${duration * (index + 1) - 2}`\n      );\n      return timeline;\n    }\n    function addConvergingBranchLineAnimation(timeline, duration, index) {\n      timeline.from(svgContainer.value.querySelector(`.line-${index + 1}`), {\n        scaleY: 0,\n        duration\n      }, `start+=${duration * index}`).from(\n        svgContainer.value.querySelector(`.branch-line-${index + 1}`),\n        {\n          scaleY: 0,\n          duration: duration - 1\n        },\n        `start+=${duration * index}`\n      ).from(\n        svgContainer.value.querySelector(`.branch-${index + 1}`),\n        {\n          strokeDashoffset: 186,\n          duration: duration - 2\n        },\n        `start+=${duration * (index + 1) - 1}`\n      );\n      return timeline;\n    }\n    function animateTimeline(timeline, duration) {\n      let index = 0;\n      addNodeRefsToItems(TIMELINE).forEach((item) => {\n        const {\n          type\n        } = item;\n        if (type === NodeTypes.CHECKPOINT && item.shouldDrawLine) {\n          const {\n            next,\n            prev\n          } = item;\n          if (prev && prev.type === NodeTypes.DIVERGE)\n            addDivergingBranchLineAnimation(timeline, duration, index);\n          else if (next && next.type === NodeTypes.CONVERGE)\n            addConvergingBranchLineAnimation(timeline, duration, index);\n          else\n            addLineSvgAnimation(timeline, duration, index);\n          index++;\n        }\n      });\n    }\n    function setTimelineSvg(svgContainer2, timelineSvg2) {\n      const containerWidth = svgContainer2.value.clientWidth;\n      svgWidth.value = containerWidth;\n      const resultSvgString = generateTimelineSvg(TIMELINE);\n      timelineSvg2.value.innerHTML = resultSvgString;\n      if (isSmallScreen())\n        rightBranchX = 70;\n    }\n    function setSlidesAnimation(timeline) {\n      svgCheckpointItems.forEach((_, index) => {\n        if (index !== 0)\n          timeline.fromTo(screenContainer.value.querySelector(`.slide-${index + 1}`), {\n            opacity: 0\n          }, {\n            opacity: 1\n          });\n        if (index !== svgCheckpointItems.length - 1) {\n          timeline.to(screenContainer.value.querySelector(`.slide-${index + 1}`), {\n            opacity: 0,\n            delay: 2.35\n          });\n        }\n      });\n    }\n    function initScrollTrigger() {\n      const timeline = gsap.timeline({\n        defaults: {\n          ease: Linear.easeNone,\n          duration: 0.44\n        }\n      }).addLabel(\"start\");\n      let duration;\n      let trigger;\n      let start;\n      let end;\n      let additionalConfig = {};\n      if (props.isDesktop && !isSmallScreen()) {\n        setSlidesAnimation(timeline);\n        const platformHeight = screenContainer.value.getBoundingClientRect().height;\n        trigger = screenContainer.value;\n        start = `top ${(window.innerHeight - platformHeight) / 2}`;\n        end = `+=${svgLength - platformHeight}`;\n        additionalConfig = {\n          pin: true,\n          pinSpacing: true\n        };\n        duration = timeline.totalDuration() / 15;\n      } else {\n        screenContainer.value.innerHTML = \"\";\n        trigger = svgContainer.value;\n        start = \"top center\";\n        end = `+=${svgLength}`;\n        duration = 3;\n      }\n      ScrollTrigger.create({\n        ...additionalConfig,\n        trigger,\n        start,\n        end,\n        scrub: 0,\n        animation: timeline\n      });\n      return {\n        timeline,\n        duration\n      };\n    }\n    const svgCheckpointItems = TIMELINE.filter((item) => item.type === NodeTypes.CHECKPOINT && item.shouldDrawLine);\n    const svgLength = svgCheckpointItems && svgCheckpointItems.length * separation;\n    onMounted(() => {\n      setTimelineSvg(svgContainer, timelineSvg);\n      const {\n        timeline,\n        duration\n      } = initScrollTrigger();\n      animateTimeline(timeline, duration);\n    });\n    return (_ctx, _cache) => {\n      return _openBlock(), _createElementBlock(\"section\", {\n        id: _unref(MENULINKS)[3].ref,\n        class: \"section-container relative min-h-screen w-full flex flex-col select-none justify-center py-8\"\n      }, [\n        _hoisted_2,\n        _createElementVNode(\"div\", _hoisted_3, [\n          _createElementVNode(\"div\", {\n            ref_key: \"svgContainer\",\n            ref: svgContainer,\n            class: \"line-svg col-span-12 md:col-span-6\"\n          }, [\n            (_openBlock(), _createElementBlock(\"svg\", {\n              ref_key: \"timelineSvg\",\n              ref: timelineSvg,\n              width: _unref(svgWidth),\n              height: _unref(svgLength),\n              viewBox: `0 0 ${_unref(svgWidth)} ${_unref(svgLength)}`,\n              fill: \"none\"\n            }, null, 8, _hoisted_4))\n          ], 512),\n          _createElementVNode(\"div\", _hoisted_5, [\n            _createElementVNode(\"div\", {\n              ref_key: \"screenContainer\",\n              ref: screenContainer,\n              class: \"h-96 max-w-full overflow-hidden bg-transparent w-200\"\n            }, [\n              _createElementVNode(\"div\", _hoisted_6, [\n                _createElementVNode(\"div\", _hoisted_7, [\n                  (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_unref(svgCheckpointItems), (item, idx) => {\n                    return _openBlock(), _createElementBlock(\"img\", {\n                      key: `${item.title}-${idx}`,\n                      alt: \"Timeline\",\n                      layout: \"fill\",\n                      class: _normalizeClass(`w-full absolute top-0 object-cover slide-${idx + 1}`),\n                      src: `${item.slideImage}`\n                    }, null, 10, _hoisted_8);\n                  }), 128))\n                ])\n              ])\n            ], 512)\n          ])\n        ])\n      ], 8, _hoisted_1);\n    };\n  }\n});\n",
      "start": 1715588493192,
      "end": 1715588493202,
      "order": "post",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappingslD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,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C,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClzE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjnD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnhG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvtjtH,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxzpM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzjB,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrrpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChnW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACprD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7E,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtlB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChtE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvxE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtrhD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChpH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3E,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxlI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrplB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC;AACH,CAAC,CAAC,CAAC;"
      }
    },
    {
      "name": "unctx:transform",
      "start": 1715588493203,
      "end": 1715588493203,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1715588493203,
      "end": 1715588493203,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1715588493203,
      "end": 1715588493203,
      "order": "post"
    },
    {
      "name": "element-plus:transform",
      "start": 1715588493203,
      "end": 1715588493203,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1715588493204,
      "end": 1715588493204,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1715588493204,
      "end": 1715588493204,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1715588493204,
      "end": 1715588493204,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1715588493204,
      "end": 1715588493204,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1715588493205,
      "end": 1715588493205,
      "order": "normal"
    }
  ]
}
