{
  "resolvedId": "D:/CODE/blog/myNuxt/resGro/node_modules/lodash-es/_equalArrays.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import SetCache from './_SetCache.js';\nimport arraySome from './_arraySome.js';\nimport cacheHas from './_cacheHas.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Check that cyclic values are equal.\n  var arrStacked = stack.get(array);\n  var othStacked = stack.get(other);\n  if (arrStacked && othStacked) {\n    return arrStacked == other && othStacked == array;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\nexport default equalArrays;\n",
      "start": 1715597144018,
      "end": 1715597144768,
      "sourcemaps": null
    },
    {
      "name": "unocss:transformers:pre",
      "start": 1715597144768,
      "end": 1715597144768,
      "order": "pre"
    },
    {
      "name": "unocss:global:build:scan",
      "start": 1715597144768,
      "end": 1715597144768,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1715597144770,
      "end": 1715597144770,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1715597144770,
      "end": 1715597144770,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1715597144770,
      "end": 1715597144770,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1715597144770,
      "end": 1715597144770,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1715597144770,
      "end": 1715597144770,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1715597144770,
      "end": 1715597144770,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1715597144770,
      "end": 1715597144770,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1715597144770,
      "end": 1715597144770,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1715597144770,
      "end": 1715597144770,
      "order": "normal"
    },
    {
      "name": "unocss:transformers:undefined",
      "start": 1715597144770,
      "end": 1715597144770,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1715597144770,
      "end": 1715597144770,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1715597144770,
      "end": 1715597144770,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1715597144770,
      "end": 1715597144770,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1715597144770,
      "end": 1715597144770,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1715597144770,
      "end": 1715597144770,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1715597144770,
      "end": 1715597144770,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1715597144770,
      "end": 1715597144770,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1715597144770,
      "end": 1715597144770,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1715597144770,
      "end": 1715597144770,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1715597144770,
      "end": 1715597144770,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1715597144770,
      "end": 1715597144770,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1715597144770,
      "end": 1715597144770,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1715597144770,
      "end": 1715597144770,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1715597144770,
      "end": 1715597144770,
      "order": "normal"
    },
    {
      "name": "unocss:transformers:post",
      "start": 1715597144770,
      "end": 1715597144770,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1715597144770,
      "end": 1715597144770,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1715597144770,
      "end": 1715597144770,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1715597144770,
      "end": 1715597144770,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1715597144770,
      "end": 1715597144770,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1715597144770,
      "end": 1715597144770,
      "order": "post"
    },
    {
      "name": "element-plus:transform",
      "start": 1715597144770,
      "end": 1715597144770,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1715597144770,
      "end": 1715597144770,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1715597144770,
      "end": 1715597144770,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1715597144770,
      "end": 1715597144770,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1715597144770,
      "end": 1715597144770,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1715597144770,
      "end": 1715597144770,
      "order": "normal"
    }
  ]
}
